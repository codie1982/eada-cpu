cmake_minimum_required(VERSION 3.17 FATAL_ERROR)
cmake_policy(SET CMP0091 NEW)
cmake_policy(SET CMP0042 NEW)

# ðŸ“Œ Proje AdÄ±
project(eada-cpu LANGUAGES CXX)

# ðŸ“Œ C++ StandardÄ±nÄ± Ayarla
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# ðŸ“Œ Derleme Tipini Belirle (VarsayÄ±lan: Release)
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

# ðŸ“Œ Node.js ve N-API iÃ§in gerekli baÅŸlÄ±k dosyalarÄ±nÄ± ekle
execute_process(
    COMMAND node -p "require('node-addon-api').include"
    OUTPUT_VARIABLE NODE_ADDON_API_DIR
    OUTPUT_STRIP_TRAILING_WHITESPACE
)

execute_process(
    COMMAND node -p "require('node-addon-api').include"
    OUTPUT_VARIABLE NODE_GYP_DIR
    OUTPUT_STRIP_TRAILING_WHITESPACE
)

execute_process(
    COMMAND node -p "require('node-api-headers').include"
    OUTPUT_VARIABLE NODE_API_HEADERS_DIR
    OUTPUT_STRIP_TRAILING_WHITESPACE
)
# **Node.js baÅŸlÄ±k dosyalarÄ±nÄ± ekleyelim**
include_directories(${NODE_ADDON_API_DIR})
include_directories(${NODE_GYP_DIR})
include_directories(${NODE_API_HEADERS_DIR})
include_directories(/usr/include/node) # Genel bir konum, deÄŸiÅŸtirebilirsin
include_directories(${CMAKE_SOURCE_DIR}/node_modules/node-addon-api)
include_directories(${CMAKE_SOURCE_DIR}/src)

# ðŸ“Œ FAISS KÃ¼tÃ¼phanesi
set(FAISS_LIB_PATH "/usr/local/lib")
set(FAISS_INCLUDE_PATH "/usr/local/include")

# FAISS KÃ¼tÃ¼phanesinin var olup olmadÄ±ÄŸÄ±nÄ± kontrol et
if(NOT EXISTS "${FAISS_LIB_PATH}/libfaiss.so")
    message(FATAL_ERROR "FAISS kÃ¼tÃ¼phanesi bulunamadÄ±! LÃ¼tfen ${FAISS_LIB_PATH} iÃ§inde `libfaiss.so` olduÄŸundan emin olun.")
endif()

# ðŸ“Œ Ã‡Ä±kÄ±ÅŸ (Output) Dizini
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/build/Release)

# ðŸ“Œ Kaynak Dosyalar
file(GLOB SOURCE_FILES "src/*.cpp" "src/*.h")

# ðŸ“Œ Shared Library (eada.node) OluÅŸtur
add_library(eada MODULE ${SOURCE_FILES} ${CMAKE_JS_SRC})

# ðŸ“Œ FAISS KÃ¼tÃ¼phanesini BaÄŸlama ve RPATH AyarlarÄ±
if(WIN32)
    target_link_libraries(eada "${FAISS_LIB_PATH}/faiss.dll")
    set_target_properties(eada PROPERTIES PREFIX "" SUFFIX ".node")
elseif(APPLE)
    target_link_libraries(eada "${FAISS_LIB_PATH}/libfaiss.so")
    set_target_properties(eada PROPERTIES PREFIX "" SUFFIX ".node")
else()
    target_link_libraries(eada "${FAISS_LIB_PATH}/libfaiss.so" "-fopenmp")
    set_target_properties(eada PROPERTIES PREFIX "" SUFFIX ".node")

    # âœ… **Linux iÃ§in daha saÄŸlam bir RPATH ayarÄ±**
    set_target_properties(eada PROPERTIES
        BUILD_RPATH "\$ORIGIN/../lib"
        INSTALL_RPATH "\$ORIGIN/../lib"
        INSTALL_RPATH_USE_LINK_PATH TRUE
    )
endif()

# ðŸ“Œ Prebuilds klasÃ¶rÃ¼nÃ¼ otomatik oluÅŸtur
install(CODE "file(MAKE_DIRECTORY ${CMAKE_SOURCE_DIR}/prebuilds)")

# ðŸ“Œ Eklenti dosyasÄ±nÄ± doÄŸru dizine kur
install(TARGETS eada 
    LIBRARY DESTINATION prebuilds
    RUNTIME DESTINATION prebuilds
)


